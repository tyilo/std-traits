# Open https://doc.rust-lang.org/stable/std/primitive.f32.html
# Click "Summary"
# Copy text from "Implementations" section

Source
impl f32
1.0.0 · Source
pub fn floor(self) -> f32

1.0.0 · Source
pub fn ceil(self) -> f32

1.0.0 · Source
pub fn round(self) -> f32

1.77.0 · Source
pub fn round_ties_even(self) -> f32

1.0.0 · Source
pub fn trunc(self) -> f32

1.0.0 · Source
pub fn fract(self) -> f32

1.0.0 · Source
pub fn mul_add(self, a: f32, b: f32) -> f32

1.38.0 · Source
pub fn div_euclid(self, rhs: f32) -> f32

1.38.0 · Source
pub fn rem_euclid(self, rhs: f32) -> f32

1.0.0 · Source
pub fn powi(self, n: i32) -> f32

1.0.0 · Source
pub fn powf(self, n: f32) -> f32

1.0.0 · Source
pub fn sqrt(self) -> f32

1.0.0 · Source
pub fn exp(self) -> f32

1.0.0 · Source
pub fn exp2(self) -> f32

1.0.0 · Source
pub fn ln(self) -> f32

1.0.0 · Source
pub fn log(self, base: f32) -> f32

1.0.0 · Source
pub fn log2(self) -> f32

1.0.0 · Source
pub fn log10(self) -> f32

1.0.0 · Source
pub fn abs_sub(self, other: f32) -> f32
👎Deprecated since 1.10.0: you probably meant (self - other).abs(): this operation is (self - other).max(0.0) except that abs_sub also propagates NaNs (also known as fdimf in C). If you truly need the positive difference, consider using that expression or the C function fdimf, depending on how you wish to handle NaN (please consider filing an issue describing your use-case too).

1.0.0 · Source
pub fn cbrt(self) -> f32

1.0.0 · Source
pub fn hypot(self, other: f32) -> f32

1.0.0 · Source
pub fn sin(self) -> f32

1.0.0 · Source
pub fn cos(self) -> f32

1.0.0 · Source
pub fn tan(self) -> f32

1.0.0 · Source
pub fn asin(self) -> f32

1.0.0 · Source
pub fn acos(self) -> f32

1.0.0 · Source
pub fn atan(self) -> f32

1.0.0 · Source
pub fn atan2(self, other: f32) -> f32

1.0.0 · Source
pub fn sin_cos(self) -> (f32, f32)

1.0.0 · Source
pub fn exp_m1(self) -> f32

1.0.0 · Source
pub fn ln_1p(self) -> f32

1.0.0 · Source
pub fn sinh(self) -> f32

1.0.0 · Source
pub fn cosh(self) -> f32

1.0.0 · Source
pub fn tanh(self) -> f32

1.0.0 · Source
pub fn asinh(self) -> f32

1.0.0 · Source
pub fn acosh(self) -> f32

1.0.0 · Source
pub fn atanh(self) -> f32

Source
pub fn gamma(self) -> f32
🔬This is a nightly-only experimental API. (float_gamma #99842)

Source
pub fn ln_gamma(self) -> (f32, i32)
🔬This is a nightly-only experimental API. (float_gamma #99842)

Source
impl f32
1.43.0 · Source
pub const RADIX: u32 = 2u32

1.43.0 · Source
pub const MANTISSA_DIGITS: u32 = 24u32

1.43.0 · Source
pub const DIGITS: u32 = 6u32

1.43.0 · Source
pub const EPSILON: f32 = 1.1920929E-7f32

1.43.0 · Source
pub const MIN: f32 = -3.40282347E+38f32

1.43.0 · Source
pub const MIN_POSITIVE: f32 = 1.17549435E-38f32

1.43.0 · Source
pub const MAX: f32 = 3.40282347E+38f32

1.43.0 · Source
pub const MIN_EXP: i32 = -125i32

1.43.0 · Source
pub const MAX_EXP: i32 = 128i32

1.43.0 · Source
pub const MIN_10_EXP: i32 = -37i32

1.43.0 · Source
pub const MAX_10_EXP: i32 = 38i32

1.43.0 · Source
pub const NAN: f32 = NaN_f32

1.43.0 · Source
pub const INFINITY: f32 = +Inf_f32

1.43.0 · Source
pub const NEG_INFINITY: f32 = -Inf_f32

1.0.0 (const: 1.83.0) · Source
pub const fn is_nan(self) -> bool

1.0.0 (const: 1.83.0) · Source
pub const fn is_infinite(self) -> bool

1.0.0 (const: 1.83.0) · Source
pub const fn is_finite(self) -> bool

1.53.0 (const: 1.83.0) · Source
pub const fn is_subnormal(self) -> bool

1.0.0 (const: 1.83.0) · Source
pub const fn is_normal(self) -> bool

1.0.0 (const: 1.83.0) · Source
pub const fn classify(self) -> FpCategory

1.0.0 (const: 1.83.0) · Source
pub const fn is_sign_positive(self) -> bool

1.0.0 (const: 1.83.0) · Source
pub const fn is_sign_negative(self) -> bool

Source
pub const fn next_up(self) -> f32
🔬This is a nightly-only experimental API. (float_next_up_down #91399)

Source
pub const fn next_down(self) -> f32
🔬This is a nightly-only experimental API. (float_next_up_down #91399)

1.0.0 (const: unstable) · Source
pub fn recip(self) -> f32

1.7.0 (const: unstable) · Source
pub fn to_degrees(self) -> f32

1.7.0 (const: unstable) · Source
pub fn to_radians(self) -> f32

1.0.0 (const: unstable) · Source
pub fn max(self, other: f32) -> f32

1.0.0 (const: unstable) · Source
pub fn min(self, other: f32) -> f32

Source
pub const fn maximum(self, other: f32) -> f32
🔬This is a nightly-only experimental API. (float_minimum_maximum #91079)

Source
pub const fn minimum(self, other: f32) -> f32
🔬This is a nightly-only experimental API. (float_minimum_maximum #91079)

Source
pub fn midpoint(self, other: f32) -> f32
🔬This is a nightly-only experimental API. (num_midpoint #110840)

1.44.0 · Source
pub unsafe fn to_int_unchecked<Int>(self) -> Int
where
    f32: FloatToInt<Int>,

1.20.0 (const: 1.83.0) · Source
pub const fn to_bits(self) -> u32

1.20.0 (const: 1.83.0) · Source
pub const fn from_bits(v: u32) -> f32

1.40.0 (const: 1.83.0) · Source
pub const fn to_be_bytes(self) -> [u8; 4]

1.40.0 (const: 1.83.0) · Source
pub const fn to_le_bytes(self) -> [u8; 4]

1.40.0 (const: 1.83.0) · Source
pub const fn to_ne_bytes(self) -> [u8; 4]

1.40.0 (const: 1.83.0) · Source
pub const fn from_be_bytes(bytes: [u8; 4]) -> f32

1.40.0 (const: 1.83.0) · Source
pub const fn from_le_bytes(bytes: [u8; 4]) -> f32

1.40.0 (const: 1.83.0) · Source
pub const fn from_ne_bytes(bytes: [u8; 4]) -> f32

1.62.0 · Source
pub fn total_cmp(&self, other: &f32) -> Ordering

1.50.0 (const: unstable) · Source
pub fn clamp(self, min: f32, max: f32) -> f32

1.0.0 (const: unstable) · Source
pub fn abs(self) -> f32

1.0.0 (const: unstable) · Source
pub fn signum(self) -> f32

1.35.0 (const: unstable) · Source
pub fn copysign(self, sign: f32) -> f32
