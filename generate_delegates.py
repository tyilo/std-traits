import re
import shutil
from dataclasses import dataclass
from pathlib import Path
from typing import IO
from tempfile import NamedTemporaryFile


@dataclass
class Trait:
    example_implementor: str
    core_fns: str
    ignores: set[str]
    replacements: dict[str, str]


TRAITS = {
    "FLOAT": Trait(
        example_implementor="f32",
        core_fns=Path("spec/f32_core.txt").read_text(),
        ignores={
            # Implemented on Number trait
            "to_be_bytes",
            "to_le_bytes",
            "to_ne_bytes",
            "from_be_bytes",
            "from_le_bytes",
            "from_ne_bytes",
            # Has unstable trait bound
            "unsafe fn to_int_unchecked<Int>",
        },
        replacements={
            "u32": "Self::Bits",
            "[u8; 4]": "Self::Bytes",
        },
    )
}

ARG_TYPE_RE = re.compile(r": [^,)]+")


def print_decl(dst: IO[str], indent: str, trait: Trait, impl: bool) -> None:
    print(f"{indent}// Generated by generate_delegates.py", file=dst)
    print(file=dst)
    is_unstable = False
    for l in trait.core_fns.splitlines():
        if l == "source":
            is_unstable = True
        if not l.startswith("pub "):
            continue

        if is_unstable:
            is_unstable = False
            continue

        for k, v in trait.replacements.items():
            l = l.replace(k, v)

        l = l.removeprefix("pub ")
        l = l.removeprefix("const ")
        l = l.replace(trait.example_implementor, "Self")
        call = l.split(" -> ")[0].removeprefix("fn ")
        call = ARG_TYPE_RE.sub("", call)
        name = call.split("(")[0]

        if name in trait.ignores:
            continue

        if impl:
            print(
                f"""{indent}{l} {{
{indent}    Self::{call}
{indent}}}
""",
                file=dst,
            )
        else:
            print(
                f"""{indent}/// See [`f32::{name}`].
{indent}{l};
""",
                file=dst,
            )


START_RE = re.compile(r"^(?P<indent>\s*)// @START@ (?P<type>\S+) (?P<name>\S+)")

with NamedTemporaryFile("w") as dst:
    with open("src/num.rs", "r") as src:
        copy_lines = True
        for l in src:
            if copy_lines:
                print(l, end="", file=dst)
            if "@START@" in l:
                m = START_RE.search(l)
                assert m is not None
                group = m.groupdict()
                indent = group["indent"]
                trait = TRAITS[group["name"]]
                impl = group["type"] == "IMPL"
                print_decl(dst, indent, trait, impl)
                copy_lines = False

            if "@END@" in l:
                print(l, end="", file=dst)
                copy_lines = True

    dst.flush()
    shutil.move(dst.name, "src/num.rs")
